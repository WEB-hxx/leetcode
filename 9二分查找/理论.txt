二分查找算法
let exampleArray = [1, 3, 5, 7, 11,13, 17,19, 23, 29， 31, 37, 41,43，47, 53, 59];

在执行查找操作时需要把3个数据保存为变量：minIndex, middleIndex 和maxIndex。
minIndex初始值为0
maxIndex 的值可以由数组的长度计算得到：let maxIndex = array.length - 1;
我们用minIndex 和maxIndex 的值相加，然后除以 2 可以得到 middleIndex 的初始值。
问题是这个值可能不是一个整数，可以用 Math.floor() 或者 Math.ceil() 来得到临近的整数，
这里我们用 Math.floor()：let middleIndex = Math.floor((minIndex + maxIndex) / 2)。
我们的while循环会一直运行直到结束。这里，我用了 while(minIndex <= maxIndex)
数组里一共有17个元素，根据上述的计算规则。middleIndex = Math.floor(( 0 + 16) / 2)，得到值为 8。我们选取数组中索引为8的元素，
即“23”。现在我们会用这个值和目标值“37”进行比较，看看它更大还是更小。
如果 middleIndex所在的值比目标值37小，我们知道目标值可能存在于middleIndex的右侧。然后把minIndex的值调整为middleIndex右侧的那个索引。
如果 middleIndex 所在的值大于目标值37，我们知道目标值可能存在于middleIndex 的左侧。然后把 maxIndex 调整为 middleIndex 左侧的那个索引。
如果middleIndex所在的值恰好等于目标值37，那么我们就顺利找到了目标值，把这个middleIndex值返回即可。
这个while循环可能只会执行一次，也有可能会执行很多次，取决于这个数组的长度。
最后如果没有找到目标值，我们返回 -1 表示没有找到指定的值。

function BinarySearch(array, element) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let testElement ;
    while (minIndex <= maxIndex) {
        const middleIndex = Math.fLoor( (minIndex + maxIndex) / 2);
        testElement = array [middLeIndex];
        if (testELement < element) {
        //Going r ight
        minIndex = middleIndex + 1;
        } else if (testElement > element) {
        // Going Left
        maxIndex = middleIndex - 1;
        } else {
        // Found !
        return middleIndex;
        }
    }
    // Not found!
    return -1;
}
